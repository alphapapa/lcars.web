@import "variables";

%panel-child {
    background-color: $bgDefault;
    color: $fgDefault;
    position: absolute;
    height: auto;
    width: auto;
    overflow: auto;
    top: $zero;
    left: $zero;
    right: $zero;
    bottom: $zero;
    margin: 0;
}

.panel {
    display: block;
    position: relative;
    overflow: hidden;
    height: 300px;
    background-color: $fgDefault;
    margin: $areaBorderWidth * 2;

    &:before {
        @extend %panel-child;
        content: "";
        overflow: hidden;
    }

    > .content {
        @extend %panel-child;
        margin: 16px;
    }

    > .column {
        @extend %panel-child;
        @extend .layout-v;

        > .area,
        > .button {
            border-left-width: 0;
            border-right-width: 0;
        }
    }

    > .row {
        @extend %panel-child;
        @extend .layout-h;

        > .area,
        > .button {
            border-top-width: 0;
            border-bottom-width: 0;
        }
    }

    &.top {
        > .column {
            margin-top: 40px;
            padding-top: $areaBorderWidth;
        }

        > .row {
            bottom: auto;
        }
    }

    &.left {
        > .column {
            right: auto;
        }

        > .row {
            margin-left: 40px;
            padding-left: $areaBorderWidth;
        }
    }

    &.bottom {
        > .column {
            margin-bottom: 40px;
            padding-bottom: $areaBorderWidth;
        }

        > .row {
            top: auto;
        }
    }

    &.right {
        > .column {
            left: auto;
        }

        > .row {
            margin-right: 40px;
            padding-right: $areaBorderWidth;
        }
    }

    &.top.left {
        border-top-left-radius: $radiusOuter;

        &:before {
            border-top-left-radius: $radiusInner;
        }
    }

    &.top.right {
        border-top-right-radius: $radiusOuter;

        &:before {
            border-top-right-radius: $radiusInner;
        }
    }

    &.bottom.left {
        border-bottom-left-radius: $radiusOuter;

        &:before {
            border-bottom-left-radius: $radiusInner;
        }
    }

    &.bottom.right {
        border-bottom-right-radius: $radiusOuter;

        &:before {
            border-bottom-right-radius: $radiusInner;
        }
    }
}

@mixin panelSizeDefinition($size) {
    @if (map-has-key($size, rowHeight)) {
        $rowHeight: map-get($size, rowHeight);

        &.top {
            &:before,
            > .content,
            > .column {
                top: $rowHeight;
            }
        }

        &.bottom {
            &:before,
            > .content,
            > .column {
                bottom: $rowHeight;
            }
        }

        &.top,
        &.bottom {
            > .row {
                height: $rowHeight;
            }
        }
    }

    @if (map-has-key($size, columnWidth)) {
        $columnWidth: map-get($size, columnWidth);

        &.left {
            &:before,
            > .content,
            > .row {
                left: $columnWidth;
            }
        }

        &.right {
            &:before,
            > .content,
            > .row {
                right: $columnWidth;
            }
        }

        &.left,
        &.right {
            > .column {
                width: $columnWidth;
            }
        }
    }
}

@each $name,
$size in $panelSizes {
    .panel#{$name} {
        @include panelSizeDefinition($size);
    }
}

@include mobile {
    @each $name,
    $size in $panelSizes_mobile {
        .panel#{$name} {
            @include panelSizeDefinition($size);
        }
    }
}
